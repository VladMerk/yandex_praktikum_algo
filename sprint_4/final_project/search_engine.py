"""
    --- Подготовка данных:

Сначала мы должны прочитать входные данные, то есть количество документов и сами документы.
Каждый документ мы можем представить как строку, содержащую слова, разделенные пробелами.


    --- Индексация:

Нам нужно построить обратный индекс, который будет хранить информацию о том, какие слова содержатся в каждом документе.
Мы можем использовать хеш-таблицу для этого. Ключами будут слова, а значениями будут списки идентификаторов документов,
в которых они встречаются. Кроме того, мы будем хранить суммарное количество вхождений каждого слова в каждом документе.


    --- Поиск:

При получении запроса мы проходим по каждому слову в запросе и используем обратный индекс,
чтобы получить список документов, содержащих это слово.
Затем мы суммируем релевантности документов, учитывая количество вхождений каждого слова из запроса в каждый документ.
Наконец, мы сортируем документы по убыванию релевантности и выдаем первые пять.


    --- Рассмотрение случаев:

Если слово из запроса встречается в малом количестве документов, это может уменьшить количество документов,
подходящих под запрос.
Если одно слово много раз встречается в одном документе, его релевантность для этого документа будет высокой.

"""


def build_index(documents: list[str]) -> dict:
    """Функция для создания индекса передаваемого списка документов
    Аргументы:
        documents (list[str]): Передаваемый список документов, по которым необходимо создать индекс
    Возвращаемые значения:
        dict: Словарь, содержащий в качестве ключей - слова документов,
              а в качестве значений - список документов, в которых оно встречается.
    """
    index: dict = {}
    for doc_id, document in enumerate(documents, 1):
        words: list[str] = document.split()
        for word in words:
            index.setdefault(word, []).append(doc_id)

    return index


def search(index: dict, query: str) -> list[int]:
    query_words: list[str] = query.split()

    relevance = {}
    for word in query_words:
        if word in index:
            for doc_id in index[word]:
                relevance[doc_id] = relevance.get(doc_id, 0) + 1

    relevant_docs: list[int] = sorted(relevance, key=lambda x: relevance[x], reverse=True)[:5]
    return relevant_docs


indx = build_index([
    'i love coffee',
    'coffee with milk and sugar',
    'free tea for everyone'
])
print(f"{indx=}")

rel = search(index=indx, query='i like black coffee without milk')
print(rel)
