"""
Вам дана статистика по числу запросов в секунду к вашему любимому рекомендательному сервису.

Измерения велись n секунд.

В секунду i поступает qi запросов.

Примените метод скользящего среднего с длиной окна k к этим данным и выведите результат.

Формат ввода.
В первой строке передаётся натуральное число n, количество секунд, в течение которых велись измерения. 1 ≤ n ≤ 105

Во второй строке через пробел записаны n целых неотрицательных чисел qi, каждое лежит в диапазоне от 0 до 103.

В третьей строке записано натуральное число k (1 ≤ k ≤ n) —– окно сглаживания.

Примечание для Go:

Заметьте, что в данной задаче достаточно большой размер ввода.
Поэтому необходимо задавать размер буфера для сканнера хотя бы 600 Кб.

Формат вывода.
Выведите через пробел результат применения метода скользящего среднего к серии измерений.
Должно быть выведено n - k + 1 элементов, каждый элемент -— вещественное (дробное) число.
"""

import pytest


def moving_average(n: int, arr: list[int], window_size: int) -> list[float]:
    result = []

    # Предварительное вычисление суммы элементов первого окна
    window_sum = sum(arr[:window_size])

    # Добавление первого скользящего среднего
    result.append(window_sum / window_size)

    # Перемещение окна и обновление суммы на каждом шаге
    for i in range(1, n - window_size + 1):
        window_sum = window_sum - arr[i - 1] + arr[i + window_size - 1]
        result.append(window_sum / window_size)

    return result


@pytest.mark.parametrize(
    "n, arr, window_size, expected",
    [(9, [9, 3, 2, 0, 1, 5, 1, 0, 0], 3, [4.6666666667, 1.666666667, 1, 2, 2.333333335, 2, 0.3333333])],
)
def test_moving_average(n: int, arr: list[int], window_size: int, expected: list[float]) -> None:
    assert moving_average(n, arr, window_size) == expected
